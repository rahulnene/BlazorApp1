@page "/characters/delete/{id}"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Characters</PageTitle>



@if (string.IsNullOrEmpty(JWT))
{
    <div>
        <label for="jwtInput">Enter JWT:</label>
        <input id="jwtInput" @bind="@JWT" />
        <button @onclick="DeleteCharacterAction">Delete Character</button>
    </div>
}
else if (!string.IsNullOrEmpty(successString))
{
    <p>@successString</p>
}
else
{
    <p>Processing...</p>
}

@code {
    [Parameter] public string? id { get; set; }

    private string? successString;
    private string? JWT;

    protected async Task DeleteCharacterAction()
    {
        if ((string.IsNullOrEmpty(id)) | (!int.TryParse(id, out int parsedId)))

        {
            successString = "Invalid ID format";
        }
        else
        {
            try
            {
                Console.WriteLine($"Deleting character with ID: {parsedId}");
                await ApiService.DeleteCharacter(parsedId, JWT);
                successString = "Character deleted successfully";
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                successString = ex.ToString().Contains("401") ? "Unauthorized" : "Not Found";
            }
            StateHasChanged();
        }
    }
}
