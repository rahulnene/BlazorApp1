@page "/characters/update"
@inject ApiService ApiService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@* @rendermode InteractiveServer *@
<PageTitle>Update a character</PageTitle>

<div>
    @if (SuccessfulUpdate != null)
    {
        @if (SuccessfulUpdate.Value)
        {
            <p>The update was a success!</p>
        }
        else
        {
            <p> The update failed. Try again.</p>
            <p>Error: @ErrorText</p>
        }
    }
    else
    {
        <h1> Enter Character Details</h1>
        <EditForm Model=@character OnSubmit="@Submit" FormName="UpdateCharacter">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Top">
                <div>
                    <FluentNumberField Autofocus=true Name="Character ID" Appearance="FluentInputAppearance.Filled" Label="ID" @bind-Value="character.Id" Required />
                 </div>
                 <div>
                     <FluentTextField Name="Character Name" Label="Name" Appearance="FluentInputAppearance.Filled" @bind-Value="character.Name" Required />
                 </div>
                 <div>
                     <FluentTextField Name="Character Class" Label="Class" Appearance="FluentInputAppearance.Filled" @bind-Value="character.Class" />
                 </div>
                 <div>
                     <FluentNumberField Name="Character Health" Label="HP" Appearance="FluentInputAppearance.Filled" @bind-Value="character.HitPoints" />
                 </div>
                 <div>
                     <FluentNumberField Name="Character Strength" Label="Strength" Appearance="FluentInputAppearance.Filled" @bind-Value="character.Strength" />
                 </div>
                 <div>
                     <FluentNumberField Name="Character Defense" Label="Defense" Appearance="FluentInputAppearance.Filled" @bind-Value="character.Defense" />
                 </div>
                 <div>
                     <FluentNumberField Name="Character Intelligence" Label="Intelligence"  Appearance="FluentInputAppearance.Filled" @bind-Value="character.Intelligence" />
                 </div>
                 <div>
                     <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
                 </div>
             </FluentStack>
         </EditForm>
    }
</div>


@code {
    UpdateCharacterDTO character = new UpdateCharacterDTO();
    bool? SuccessfulUpdate;
    string? ErrorText;
    async Task Submit()
    {
        try
        {
            await ApiService.UpdateCharacter(character);
            SuccessfulUpdate = true;
        }
        catch (Exception ex)
        {
            ErrorText = ex.ToString();
            SuccessfulUpdate = false;
        }
        StateHasChanged();
    }
}