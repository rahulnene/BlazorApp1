@page "/characters/all"
@page "/"
@inject ApiService ApiService
@inject HttpClient Http
@rendermode InteractiveServer
<PageTitle>Characters</PageTitle>


@if (characters == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <FluentDataGrid ResizableColumns=true TGridItem="@Character" Pagination="@pagination" Items="@FilteredChars" TGridItem=Character>
        <PropertyColumn IsDefaultSortColumn=true Title="Character ID" Property="@(p => p.Id)" Sortable="true" Align="Align.Start" />
        <PropertyColumn Title="Character Name" Property="@(c => c.Name)" Sortable="true" Tooltip="true">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Character name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="HP" Property="@(p => p.HitPoints)" Sortable="true" />
        <PropertyColumn Title="STR" Property="@(p => p.Strength)" Sortable="true" />
        <PropertyColumn Title="DEF" Property="@(p => p.Defense)" Sortable="true" />
        <PropertyColumn Title="INT" Property="@(p => p.Intelligence)" Sortable="true" />
        <PropertyColumn Title="Class" Property="@(p => p.Class)" Sortable="true" />
    </FluentDataGrid>
    <FluentPaginator State="@pagination" />
    @* <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Health</th>
                <th>Strength</th>
                <th>Defense</th>
                <th>Intelligence</th>
                <th>Class</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var character in characters)
            {
                <tr>
                    <td>@character.Id</td>
                    <td>@character.Name</td>
                    <td>@character.HitPoints</td>
                    <td>@character.Strength</td>
                    <td>@character.Defense</td>
                    <td>@character.Intelligence</td>
                    <td>@character.Class</td>
                </tr>
            }
        </tbody>
    </table> *@
}

@code {
    private List<Character> characters;
    private IQueryable<Character> charactersQueryable;
    string nameFilter = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Character>? FilteredChars=> charactersQueryable?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }
    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            characters = await ApiService.GetAllCharacters();
            charactersQueryable = characters!.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
